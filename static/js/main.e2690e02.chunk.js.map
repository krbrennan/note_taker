{"version":3,"sources":["components/ToDoItems.js","components/AddItem.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isComplete","handleCheckbox","bind","assertThisInitialized","e","persist","target","className","onClick","content","id","setState","react_default","a","createElement","type","defaultChecked","style","textDecoration","text","React","Component","AddItem","toDoItemValue","handleChange","clearInputField","handleSubmit","event","value","preventDefault","onSubmit","defaultValue","placeholder","onChange","Header","App","toDoItems","handleNewItem","handleClick","cName","newListAfterDelete","map","item","concat","nextId","length","newState","_this2","toDos","components_ToDoItems","components_Header","components_AddItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2690e02.chunk.js","sourcesContent":["import React from 'react'\n\nimport '../App.css'\n\n// function ToDoItems(props){\n//   let completed = props.content.isComplete === true ? 1 : 0;\n//\n//   if(props.content.isComplete === true){\n//     return(\n//       <div className='todo-item'>\n//         <input type='checkbox' defaultChecked={true} /> :\n//         <p style={{textDecoration:'line-through'}}>{props.content.text}</p>\n//       </div>\n//     )\n//   } else {\n//     return (\n//       <div className='todo-item'>\n//         <input type='checkbox' defaultChecked={false} />\n//         <p className='todo-text'>{props.content.text}</p>\n//       </div>\n//     )\n//   }\n// }\n\n\n// 6.9.2019\n//  Add delete button to rid app of item\n//  insert on flex right-justified\n\nclass ToDoItems extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      isComplete: false\n    }\n    this.handleCheckbox = this.handleCheckbox.bind(this)\n  }\n\n  handleCheckbox(e){\n    e.persist()\n    // console.log(this.props.content.id)\n    // e.preventDefault()\n    // console.log(e.target.className)\n    // working. successfully calls back to parent\n    // console.log(this.props.content.id)\n\n    if(e.target.className === 'delete-item-checkbox'){\n      this.props.onClick(this.props.content.id, e.target.className)\n    } else {\n      this.setState({\n        isComplete: !!this.state.isComplete\n      })\n      this.props.onClick(this.props.content.id, e.target.className)\n    }\n  }\n\n  render(){\n    let isComplete = this.props.content.isComplete === true ? 1 : 0\n    return(\n      <div className='todo-item'>\n        <input type='checkbox' onClick={this.handleCheckbox} defaultChecked={isComplete} />\n        <p className='todo-words' style={\n          isComplete === 1 ? {textDecoration:'line-through'} : {textDecoration:'none'}\n        }>\n          {this.props.content.text}\n        </p>\n        <div className='delete-item-col'>\n          <h3>Delete</h3>\n          <input className='delete-item-checkbox' type='checkbox' onClick={this.handleCheckbox} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ToDoItems\n","import React from 'react'\n\n// For a few hours I was confounded with a simple issue.\n// onSubmit of the form I called a function in the parent component (through props)\n// and wondered why this component wouldn't reset the form value (back to '').\n// To remedy the issue I instead called a function within this component to handle the submit.\n// Within handleSubmit(e) I was able to clear the form value\n// and also pass the content back up to the parent so the parent\n// could update state with a new to-do item\n\n\nclass AddItem extends React.Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      toDoItemValue: ''\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.clearInputField = this.clearInputField.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(event){\n    this.setState({\n      toDoItemValue: event.target.value\n    })\n  }\n\n  clearInputField(){\n    this.setState({toDoItemValue: ''})\n  }\n\n  handleSubmit(e){\n    e.preventDefault()\n    this.props.onSubmit(e.target[0].defaultValue)\n    this.clearInputField()\n  }\n\n  render(){\n    return(\n      <div>\n      <form onSubmit={this.handleSubmit} >\n          <label><h3>Add Item:</h3>\n            <input\n              type='text'\n              placeholder='New Item, Wow, Incredible'\n              onChange={this.handleChange}\n              value={this.state.toDoItemValue}\n              className='add-item-text'\n            />\n          </label>\n          </form>\n      </div>\n    )\n  }\n}\n\nexport default AddItem\n","import React from 'react'\n\nfunction Header(){\n  return(\n    <div className='header'>\n      <h1 className='header-text'>Revolutionary To-Do List (WoW!)</h1>\n    </div>\n  )\n}\n\nexport default Header\n","// 5.1.2019\n// NEED TO:\n// Get rid of App's control over the todoItems\n// I cant modify the complete status of the items from the child component\n// the TodoItems component needs to have control over the state of the items\n\n// 6.3.2019\n//  Instead of handling control over to todoItems,\n//      make todoItems a class and handle its 'completed' state there,\n//      just like the AddItem component\n\nimport React from 'react'\nimport ToDoItems from './components/ToDoItems'\nimport AddItem from './components/AddItem'\nimport './App.css'\n\nimport Header from './components/Header'\n\nclass App extends React.Component {\n\n  constructor(){\n    super()\n    this.state = {\n      // todoItems: notesData.map(item => <ToDoItems content={item}/>),\n      toDoItems: [\n        {id:1, text: \"Add a new item!\", isComplete:true},\n      ]\n    }\n    this.handleNewItem = this.handleNewItem.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick(id, cName){\n    // this is getting called from ToDoItems child component\n    // When the item is clicked (making it complete or not)\n    // I want the items' complteted state to be changed here.\n\n    if(cName === 'delete-item-checkbox'){\n      let newListAfterDelete = [{id:1, text: \"Add a new item!\", isComplete:true},]\n      this.state.toDoItems.map(item => {\n        if(item.id != id){\n          newListAfterDelete.concat(item)\n        }\n      })\n      this.setState({\n        toDoItems:newListAfterDelete\n      })\n    } else {\n      this.state.toDoItems.map(item => {\n        if(item.id === id){\n          item.isComplete = !item.isComplete\n        }\n      })\n    }\n  }\n\n  handleNewItem(event){\n    let nextId = this.state.toDoItems.length+1\n    const newState = this.state.toDoItems.concat({id: nextId, text: event, isComplete: false})\n\n    this.setState(state => {\n        state.toDoItems = newState\n      return {\n        state\n      }\n    })\n  }\n\n  render(){\n    let toDos = this.state.toDoItems.map(item => <ToDoItems content={item} onClick={this.handleClick} onChange={this.handleChange}/>)\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className='todo-container'>\n          <AddItem onSubmit={this.handleNewItem} />\n          {toDos}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}